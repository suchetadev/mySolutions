Question : 

When the project is using Spring 4.3  and Hibernate 5.2, how to write the JUnit test without bounded with concrete DB closely. In other words, How to mock DB in JUnit test for service method.  If not possible give the reason else list cases for the different scenario.

Answer : 

The solution to this problem is to use "Mockito", a mocking framework to create mock objects and use them in Unit testing. 

1) How to use Mockito :

If you are using Maven building tool, then in "pom.xml" mention the dependency:

 <!--Mockito -->
 <dependency>
	<groupId>org.mockito</groupId>
        <artifactId>mockito-all</artifactId>
        <version>1.9.5</version>
 </dependency>

2) Consider a scenario : 

 Consider a scenario where user can reserved the car seats if seats are available. I created one simple java project which contains following files. 
	
 There will be following classes :
 
 1) Car.java - It is a simple bean class, with some attributes and getter, setter methods in it.

   public class Car {
   

   }

 2) CarDao.java - Interface with two methods in it

   public interface CarDao {
       int getAvailableSeats(Car car); 
       int reserveCarSeat(Car car, int number_of_seats);
   }

   getAvailableSeats() : method which will returns the total number of seats available in car
   reserveCarSeat() : reserves the seats in the car

 3) CarService.java - service class 

   public class CarService{
	private CarDao carDao;
 	
	public void setCarDao(CarDao carDao) {
		this.carDao = carDao;
	}
	public boolean reserveCar(Car car, int number_of_seats) {
		int available_seats = carDao.getAvailableSeats(car);
               
                if(number_of_seats < available_seats) {
		    carDao.reserveCarSeat(car,number_of_seats);
                }
        }
   }

  4) If we want to test reserveCar() method from CarService.java then "CarServiceTest.java" will be as follows :

    public class CarServiceTest{

       private CarService carService;
       private CarDao carDao;
       private Car car;
       private int number_of_seats = 3;

       @Before
       public void setUp(){
              carService = new CarService();
              car = mock(Car.class);
              carDao = mock(CarDao.class);
	      carService.setCarDao(carDao);
       }

       @Test
       public void testReserveCar() {
       	   
	      //stubbing getAvailableSeats() to return 5
              when(carDao.getAvailableSeats(car)).thenReturn(availableSeats);
              carService.reserveCar(car, number_of_seats);
           
	      //verify CarDao reserveCarSeat() method is called
              verify(carDao).reserveCarSeat(car, number_of_seats);

             //verify getAvailableSeats() is called at least once
             verify(carDao, atLeastOnce()).getAvailableSeats(car);

             //verify order of method calls
             InOrder order = inOrder(carDao);
             order.verify(carDao).getAvailableSeats(car);
             order.verify(carDao).reserveCarSeat(car, number_of_seats);
      }
   }

    
 
